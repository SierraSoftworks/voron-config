# To limit exposure to denial of service attacks, change the host in endpoints below from 0.0.0.0 to a specific network interface.
# See https://github.com/open-telemetry/opentelemetry-collector/blob/main/docs/security-best-practices.md#safeguards-against-denial-of-service-attacks

extensions:
  file_storage:
  health_check:

  basicauth/grafana/otlp:
    client_auth:
      username: <USERNAME>
      password: <PASSWORD>

receivers:
  otlp:
    protocols:
      grpc:
        endpoint: 127.0.0.1:4317
      http:
        endpoint: 127.0.0.1:4318

  prometheus:
    config:
      scrape_configs:
        - job_name: 'integrations/caddy'
          scrape_interval: 1m
          static_configs:
            - targets: ['127.0.0.1:2019']
          relabel_configs:
            - replacement: 'voron'
              target_label: instance
          metric_relabel_configs:
            - action: keep
              regex: caddy_http_request_duration_seconds_bucket|caddy_http_request_duration_seconds_count|caddy_http_requests_in_flight|caddy_http_requests_total
              source_labels:
                - __name__

        - job_name: 'klipper'
          scrape_interval: 1m
          metrics_path: /probe
          static_configs:
            - targets: ['127.0.0.1:7125']
          params:
            modules: [
              "process_stats",
              "job_queue",
              "system_info",
              "network_stats",
              "directory_info",
              "printer_objects",
              "history",
            ]
          relabel_configs:
            - source_labels: [__address__]
              target_label: __param_target
            - replacement: 'voron'
              target_label: instance
            - target_label: __address__
              replacement: 127.0.0.1:9101

        - job_name: 'spoolman'
          scrape_interval: 1m
          static_configs:
            - targets: ['127.0.0.1:7912']
          relabel_configs:
            - replacement: 'voron'
              target_label: instance

  journald/default:
    directory: /run/log/journal
    priority: info
    storage: file_storage
    units:
      - ssh
      - sudo
      - backup.service
      - systemd
      - go2rtc
      - mediamtx
      - moonraker
      - prometheus-klipper-exporter
      - spoolman-tailservice
      - ustreamer
    operators:
      - type: severity_parser
        parse_from: body.PRIORITY
        mapping:
          fatal: [0, 1, 2]
          error: 3
          warn: 4
          info: [5, 6]
          debug: 7
        overwrite_text: true

      # Process Metadata
      - type: move
        from: body._SYSTEMD_UNIT
        to: resource["service.name"]

      - type: move
        from: body.MESSAGE
        to: body

  journald/caddy:
    directory: /run/log/journal
    priority: info
    storage: file_storage
    units:
      - caddy
    operators:
      - type: move
        from: body._SYSTEMD_UNIT
        to: resource["service.name"]
      - type: json_parser
        parse_from: body.MESSAGE
        parse_to: attributes
        severity:
          parse_from: attributes.level
          mapping:
            fatal: fatal
            error: error
            warn: [warn, warning]
            info: info
            debug: [debug, verbose]
          overwrite_text: true
      - type: remove
        field: attributes.ts
      - type: move
        from: attributes.logger
        to: attributes["scope.name"]
        if: '"logger" in keys(attributes)'
      - type: move
        from: attributes.msg
        to: body

  journald/klipper:
    directory: /run/log/journal
    priority: info
    storage: file_storage
    units:
      - klipper
    operators:
      - type: move
        from: body._SYSTEMD_UNIT
        to: resource["service.name"]
      - type: recombine
        combine_field: body.MESSAGE
        is_first_entry: 'body.MESSAGE matches "^[A-Z]+:"'
      - type: regex_parser
        parse_from: body.MESSAGE
        parse_to: attributes
        regex: '^(?P<level>[A-Z]+):(?P<logger>[^:\s]+):(?P<module>[^\s]+) (?P<message>.*)$'
        severity:
          parse_from: attributes.level
          mapping:
            fatal: FATAL
            error: ERROR
            warn: [WARNING, WARN]
            info: INFO
            debug: DEBUG
          overwrite_text: true
      - type: move
        from: attributes.message
        to: body
      - type: filter
        expr: 'attributes["module"] == "Stats" or attributes["module"] == "toolhead"'
      - type: move
        from: attributes.module
        to: resource["code.module"]
        if: '"module" in keys(attributes)'
      - type: move
        from: attributes.logger
        to: resource["code.function"]
        if: '"logger" in keys(attributes)'

  journald/klipperscreen:
    directory: /run/log/journal
    priority: info
    storage: file_storage
    units:
      - KlipperScreen
    operators:
      - type: move
        from: body._SYSTEMD_UNIT
        to: resource["service.name"]
      - type: severity_parser
        parse_from: body.PRIORITY
        mapping:
          fatal: [0, 1, 2]
          error: 3
          warn: 4
          info: [5, 6]
          debug: 7
        overwrite_text: true
      - type: recombine
        combine_field: body.MESSAGE
        is_first_entry: 'body.MESSAGE matches "^\\d{8} \\d{2}:\\d{2}:\\d{2},\\d{3}"'
      - type: regex_parser
        parse_from: body.MESSAGE
        parse_to: attributes
        regex: '^(?P<time>\d{8} \d{2}:\d{2}:\d{2},\d{3}) \[(?P<module>[^:]+):(?P<function>[^\]]+)\] - (?P<message>.*)$'
      - type: move
        from: attributes.message
        to: body
      - type: move
        from: attributes.module
        to: resource["code.module"]
        if: '"module" in keys(attributes)'
      - type: move
        from: attributes.function
        to: resource["code.function"]
        if: '"function" in keys(attributes)'

  journald/spoolman:
    directory: /run/log/journal
    priority: info
    storage: file_storage
    units:
      - spoolman
    operators:
      - type: filter
        expr: "body.MESSAGE matches \"^INFO:\\\\s+127.0.0.1:\\\\d+ - .*\" or body.MESSAGE matches \"^\\\\('127.0.0.1', \\\\d+\\\\) - .*\" or body.MESSAGE matches \"^connection (open|closed)$\""
      - type: move
        from: body._SYSTEMD_UNIT
        to: resource["service.name"]
      - type: recombine
        combine_field: body.MESSAGE
        is_first_entry: 'body.MESSAGE matches "^[A-Z]+:"'
      - type: regex_parser
        parse_from: body.MESSAGE
        parse_to: attributes
        regex: '^(?P<level>[A-Z]+): (?P<message>.*)$'
        severity:
          parse_from: attributes.level
          mapping:
            fatal: FATAL
            error: ERROR
            warn: [WARNING, WARN]
            info: INFO
            debug: DEBUG
        overwrite_text: true
      - type: move
        from: attributes.message
        to: body

  journald/tailscaled:
    directory: /run/log/journal
    priority: info
    storage: file_storage
    units:
      - tailscaled
    operators:
      - type: move
        from: body._SYSTEMD_UNIT
        to: resource["service.name"]
      - type: severity_parser
        parse_from: body.PRIORITY
        mapping:
          fatal: [0, 1, 2]
          error: 3
          warn: 4
          info: [5, 6]
          debug: 7
        overwrite_text: true
      - type: move
        from: body.MESSAGE
        to: body
      - type: router
        routes:
          - expr: 'resource["service.name"] == "tailscaled.service" and body matches "^(Accept|Drop): "'
            output: tailscale_netflow_parser
        default: noop
      - id: tailscale_netflow_parser
        type: regex_parser
        parse_from: body
        parse_to: attributes.netflow
        regex: '^(?P<action>Accept|Drop): (?P<protocol>\w+)\{(?P<src_ip>[^:]+):(?P<src_port>\d+) > (?P<dst_ip>[^:]+):(?P<dst_port>\d+)\} (?P<packet_length>\d+) (?P<reason>.+)$'
      - type: noop

  hostmetrics:
    collection_interval: 30s
    scrapers:
      cpu:
      disk:
      filesystem:
      load:
        cpu_average: true

      memory:
      network:
      paging:
      process:
        mute_process_exe_error: true
        metrics:
          process.disk.io:
            enabled: false

processors:
  batch:

  resource:
    attributes:
      - key: tailscale.tag
        value: printing
        action: upsert

  resourcedetection:
    detectors: [env, system]

  transform/logs:
    log_statements:
      - context: log
        statements:
          - set(attributes["level"], severity_text)

  transform/metrics:
    metric_statements:
      - context: datapoint
        statements:
          - set(attributes["host.name"], resource.attributes["host.name"]) where resource.attributes["host.name"] != nil
          - set(attributes["process.cmdline"], resource.attributes["process.command_line"]) where resource.attributes["process.command_line"] != nil
          - set(attributes["process.exe"], resource.attributes["process.command"]) where resource.attributes["process.command"] != nil
          - set(attributes["process.exe"], resource.attributes["process.executable.name"]) where attributes["process.exe"] == nil and resource.attributes["process.executable.name"] != nil
          - set(attributes["process.user"], resource.attributes["process.owner"]) where resource.attributes["process.owner"] != nil

exporters:
  otlphttp/grafana:
    endpoint: https://otlp-gateway-prod-eu-west-0.grafana.net/otlp
    auth:
      authenticator: basicauth/grafana/otlp

service:
  telemetry:
    metrics:
      level: none
    logs:
      level: ERROR
      encoding: json
      disable_stacktrace: true

  pipelines:
    traces:
      receivers: [otlp]
      processors: [batch, resourcedetection, resource]
      exporters: [otlphttp/grafana]

    logs:
      receivers:
        - otlp
        - journald/caddy
        - journald/default
        - journald/klipper
        - journald/klipperscreen
        - journald/spoolman
        - journald/tailscaled
      processors: [batch, resourcedetection, resource, transform/logs]
      exporters: [otlphttp/grafana]

    metrics:
      receivers: [otlp, prometheus, hostmetrics]
      processors: [batch, resourcedetection, resource, transform/metrics]
      exporters: [otlphttp/grafana]

  extensions: [file_storage, health_check, basicauth/grafana/otlp]
