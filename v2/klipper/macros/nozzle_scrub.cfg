[gcode_macro CLEAN_NOZZLE]
gcode:
    {% set purge_len = params.LENGTH|default(${constants.purge_length})|float %}
    {% set enable_purge = params.PURGE|default("true") == "true" %}
    {% set purge_temp = params.PURGE_TEMP|default(printer.extruder.target)|float %}
    {% set flow_rate = params.FLOW_RATE|default(${constants.purge_flowrate})|float %}

    # mm/s flow rate based on filament diameter and desired flow rate in mm^3/s
    {% set purge_speed = flow_rate / (3.145 * (1.75/2)**2) %}

    # Ensure that the printer is configured to allow nozzle cleaning
    _ENSURE_HOMED

    # Save the current state so that we can restore it later
    SAVE_GCODE_STATE NAME=clean_nozzle
    _STATUS_CLEANING

    # Switch to absolute positioning mode
    G90

    {% set Ry = printer.toolhead.axis_maximum.y - 0.5 %}
    {% set original_temp = printer.extruder.target %}
    {% set will_purge = enable_purge and purge_len > 0 and purge_temp >= ${constants.purge_min_temp} %}

    # Move the nozzle to the parking position
    PARK_NOZZLE

    # If we're able to purge, then do so
    {% if will_purge %}
        # Start heating the nozzle to the desired purge temperature
        M104 S{purge_temp}
        
        # Raise Z for travel.
        G1 Z{${constants.brush_top} + ${constants.travel_clearance}} F${constants.travel_speed}

        # Position for purge (midway over the left hand bucket)
        G1 X{${constants.bucket_start} + (${constants.bucket_width_left} / 2)} Y{Ry} F${constants.travel_speed}

        # Wait for the extruder to reach the purge temp
        M104 S{purge_temp}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={purge_temp} MAXIMUM={purge_temp+5}
        M106 S255 # Turn on the part cooling fan to rapidly cool the purged filament

        # Perform purge if the temp is up to min temp. If not, it will skip and continue executing rest of macro. Small retract after
        # purging to minimize any persistent oozing at 5x purge_spd. G4 dwell is in milliseconds, hence * 1000 in formula.
        M83      ; relative mode

        G11     ; un-retract filament

        G1 E{purge_len} F{purge_speed * 60}

        G10     ; retract filament
        G4 P${constants.ooze_dwell * 1000}
        G92 E0   ; reset extruder
    {% endif %}

    {% if purge_temp != original_temp %}
        M104 S{original_temp} # Set the extruder to the original temperature
    {% endif %}

    # Raise Z for travel.
    G1 Z{${constants.brush_top} + ${constants.travel_clearance}} F${constants.travel_speed}

    # Position for scrub
    G1 X${constants.brush_start} Y{Ry} F${constants.travel_speed}

    ## Move nozzle down to the scrub height
    G1 Z${constants.brush_top} F${constants.travel_speed}

    # Perform the scrub swipe to snap off the filament
    {% for i in range(${constants.brush_count}) %}
        G1 X${constants.brush_start} F${constants.brush_speed}
        G1 X{${constants.brush_start} + ${constants.brush_width}} F${constants.brush_speed}
    {% endfor %}

    # Park the nozzle over the right hand bucket to indicate that it is cleaned
    PARK_NOZZLE

    M106 S0 # Turn off the part cooling fan

    _NOTIFY T="Nozzle Cleaned"

    # Restore the original extruder temperature
    M104 S{original_temp}
    {% if original_temp > purge_temp %}
        # If we were originally targetting a higher temperature, then wait for the nozzle to heat up
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={original_temp-1} MAXIMUM={original_temp+1}
    {% endif %}

    ## Restore the gcode state to how it was before the macro.
    RESTORE_GCODE_STATE NAME=clean_nozzle
    _STATUS_READY

[gcode_macro PARK_NOZZLE]
gcode:
   {% set floor = params.FLOOR|default(${constants.brush_top})|float %}
   {% set padding = params.PADDING|default(${constants.parking_padding})|float %}

   {% set x_park = ${constants.bucket_start} + (${constants.bucket_width_left} * 2/3) %}
   {% set y_park = printer.toolhead.axis_maximum.y - padding %}
   {% set z_park = [floor + ${constants.travel_clearance}, printer.toolhead.axis_maximum.z]|min %}

   _ENSURE_HOMED

   ## Save the gcode state in this macro instance.
   SAVE_GCODE_STATE NAME=PARK_NOZZLE

   G90 ; Absolute positioning mode

   # If the toolhead is currently below the parking height, then lift it first
   {% if printer.toolhead.position.z < z_park %}
       ## Raise Z for travel.
       G1 Z{z_park} F${constants.travel_speed}
   {% endif %}
   
   ## Position over the purge bucket.
   G1 X{x_park} Y{y_park} F${constants.travel_speed}
   
   ## Lower the toolhead to the parking height
   G1 Z{z_park} F${constants.travel_speed}

   RESTORE_GCODE_STATE NAME=PARK_NOZZLE