[gcode_macro clean_nozzle]
gcode:
    {% set config = printer["gcode_macro _Configuration"] %}

   {% set purge_len = params.LENGTH|default(config.purge_length)|float %}
   {% set enable_purge = params.PURGE|default("true") == "true" %}
   {% set purge_temp = params.PURGE_TEMP|default(printer.extruder.target)|float %}

    # Ensure that the printer is configured to allow nozzle cleaning
   _ENSURE_HOMED
   _CONFIGURE_EXTRUDER

    # Save the current state so that we can restore it later
    SAVE_GCODE_STATE NAME=clean_nozzle
    _STATUS_CLEANING

    # Switch to absolute positioning mode
    G90

    {% set Ry = printer.toolhead.axis_maximum.y - 1 %}
    {% set original_temp = printer.extruder.target %}
    {$ set will_purge = enable_purge and purge_len > 0 and purge_temp >= config.purge_min_temp %}

    # If we're able to purge, then do so
    {% if will_purge %}
        # Start heating the nozzle to the desired purge temperature
        M104 S{purge_temp}
        
        # Raise Z for travel.
        G1 Z{config.brush_top + config.travel_clearance} F{config.travel_speed}

        # Position for purge (midway over the left hand bucket)
        G1 X{config.bucket_start + (config.bucket_width_left / 2)} Y{Ry} F{config.travel_speed}

        # Wait for the extruder to reach the purge temp
        M109 S{purge_temp}

        # Perform purge if the temp is up to min temp. If not, it will skip and continue executing rest of macro. Small retract after
        # purging to minimize any persistent oozing at 5x purge_spd. G4 dwell is in milliseconds, hence * 1000 in formula.
        M83      ; relative mode

        G11     ; un-retract filament

        # Calculate the speed to purge at based on the desired flowrate.
        {% set purge_speed = config.purge_flowrate * 60 / 5.0 %}
        G1 E{purge_len} F{purge_speed}

        G10     ; retract filament
        # G1 E-{config.purge_retract} F{config.purge_speed * 10}
        G4 P{config.ooze_dwell * 1000}
        G92 E0   ; reset extruder
    {% endif %}

    {% if printer.extruder.temperature > config.purge_cold_temp %}
        M106 S255 # Turn on the part cooling fan to rapidly cool the purged filament
        M109 S{config.purge_cold_temp} # Wait for the extruder to cool down to the cold temp
        M106 S0 # Turn off the part cooling fan
    {% endif %}

    # Raise Z for travel.
    G1 Z{config.brush_top + config.travel_clearance} F{config.travel_speed}

    # Position for scrub
    G1 X{config.brush_start} Y{Ry} F{config.travel_speed}

    ## Move nozzle down to the scrub height
    G1 Z{config.brush_top} F{config.travel_speed}

    # Perform the scrub swipe to snap off the filament
    G1 X{config.brush_start + config.brush_width} F{config.brush_speed}

    # Park the nozzle over the right hand bucket to indicate that it is cleaned
    G1 X{config.bucket_width_left + config.bucket_width_center + (config.bucket_width_right / 2)} F{config.travel_speed}

    _NOTIFY T="Nozzle Cleaned"

    # Restore the original extruder temperature
    M109 S{original_temp}

    ## Restore the gcode state to how it was before the macro.
    RESTORE_GCODE_STATE NAME=clean_nozzle
    _STATUS_READY

[gcode_macro PARK_NOZZLE]
gcode:
   {% set config = printer["gcode_macro _Configuration"] %}

   {% set floor = params.FLOOR|default(config.brush_top)|float %}
   {% set padding = params.PADDING|default(config.parking_padding)|float %}

   {% set x_park = config.bucket_start + (config.bucket_width_left / 2) %}
   {% set y_park = printer.toolhead.axis_maximum.y - padding %}
   {% set z_park = [floor + config.travel_clearance, printer.toolhead.axis_maximum.z]|min %}

   _ENSURE_HOMED

   ## Save the gcode state in this macro instance.
   SAVE_GCODE_STATE NAME=PARK_NOZZLE

   G90 ; Absolute positioning mode

   ## Raise Z for travel.
   G1 Z{z_park} F{config.travel_speed}

   ## Position over the purge bucket.
   G1 X{x_park} Y{y_park} F{config.travel_speed}

   RESTORE_GCODE_STATE NAME=PARK_NOZZLE