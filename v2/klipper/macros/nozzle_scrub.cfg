[gcode_macro clean_nozzle]
# The variable will later be set to contain, at random, a number representing the left or right bucket.
variable_bucket_pos:            1	        

gcode:
   {% set config = printer["gcode_macro _Configuration"] %}

   {% set purge_len = params.LENGTH|default(config.purge_length)|float %}
   {% set wipe_qty = params.WIPES|default(config.brush_count)|int %}
   {% set enable_purge = params.PURGE|default("true") == "true" %}

   _ENSURE_HOMED
   _CONFIGURE_EXTRUDER
  
   ## Save the gcode state in this macro instance.
   SAVE_GCODE_STATE NAME=clean_nozzle
   _STATUS_CLEANING

   ## Set to absolute positioning.
   G90

   {% set Ry = printer.toolhead.axis_maximum.y - 1 %}

   ### Randomly select left or right bin for purge. 0 = left, 1 = right
   SET_GCODE_VARIABLE MACRO=clean_nozzle VARIABLE=bucket_pos VALUE={(range(2) | random)}

   ## Check if user enabled purge option or not.
   {% if enable_purge and purge_len > 0 %}
      ### Raise Z for travel.
      G1 Z{config.brush_top + config.travel_clearance} F{config.travel_speed}

      ### Position for purge. Randomly selects middle of left or right bucket. It references from the middle of the left bucket.
      G1 X{config.bucket_start + (config.bucket_width_left / (2 - bucket_pos)) + (bucket_pos * config.bucket_width_center) + (bucket_pos * (config.bucket_width_right / 2))} Y{Ry} F{config.travel_speed}

      ### Perform purge if the temp is up to min temp. If not, it will skip and continue executing rest of macro. Small retract after
      ### purging to minimize any persistent oozing at 5x purge_spd. G4 dwell is in milliseconds, hence * 1000 in formula.
      {% if printer.extruder.temperature >= config.purge_min_temp %}
         M83      ; relative mode
         G1 E{purge_len} F{config.purge_speed}
         G1 E-{config.purge_retract} F{config.purge_speed * 10}
         G4 P{config.ooze_dwell * 1000}
         G92 E0   ; reset extruder
      {% endif %}
   {% endif %}

   {% if wipe_qty > 0 %}
      ## Position for wipe. Either left or right of brush based off bucket_pos to avoid unnecessary travel.
      G1 X{config.brush_start + (config.brush_width * bucket_pos)} Y{Ry} Z{config.brush_top + config.travel_clearance} F{config.travel_speed}

      ## Move nozzle down into brush.
      G1 Z{config.brush_top} F{config.travel_speed}

      ## Perform wipe. Wipe direction based off bucket_pos for cool random scrubby routine.
      {% for wipes in range(0, wipe_qty) %}
         G1 X{config.brush_start + (config.brush_width * (1 - bucket_pos))} F{config.brush_speed}
         G1 X{config.brush_start + (config.brush_width * bucket_pos)} F{config.brush_speed}
      {% endfor %}
   {% endif %}

   ## Clear the brush area to avoid oozing into the brush
   G1 Z{config.brush_top + config.travel_clearance} F{config.travel_speed}
   G1 X{config.bucket_start + (config.bucket_width_left / (2 - bucket_pos)) + (bucket_pos * config.bucket_width_center) + (bucket_pos * (config.bucket_width_right / 2))} Y{Ry} F{config.travel_speed}
   _NOTIFY T="Cleaned"

   ## Restore the gcode state to how it was before the macro.
   RESTORE_GCODE_STATE NAME=clean_nozzle
   _STATUS_READY


[gcode_macro PARK_NOZZLE]
gcode:
   {% set config = printer["gcode_macro _Configuration"] %}

   {% set floor = params.FLOOR|default(config.brush_top)|float %}
   {% set padding = params.PADDING|default(config.parking_padding)|float %}

   {% set x_park = config.bucket_start + (config.bucket_width_left / 2) + (config.bucket_width_center / 2) %}
   {% set y_park = printer.toolhead.axis_maximum.y - padding %}
   {% set z_park = [floor + config.travel_clearance, printer.toolhead.axis_maximum.z]|min %}

   _ENSURE_HOMED

   ## Save the gcode state in this macro instance.
   SAVE_GCODE_STATE NAME=PARK_NOZZLE

   G90 ; Absolute positioning mode

   ## Raise Z for travel.
   G1 Z{z_park} F{config.travel_speed}

   ## Position over the purge bucket.
   G1 X{x_park} Y{y_park} F{config.travel_speed}

   RESTORE_GCODE_STATE NAME=PARK_NOZZLE